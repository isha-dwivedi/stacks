#include<iostream>
using namespace std;
class node{
  public:
  int data;
  node * next;
  node(){
      data=0;
      next=NULL;
  }
    
};
 class stk{
     public:
     node * head;
     
     stk(){
         
         head=NULL;
     }
 //insert
    
    void push( int value){
    node * temp= new node;
    
    if(head==NULL){
   	 head=temp;
   	 head->data=value;
   	 head->next=NULL;

    }
    else{     
   	 temp->data=value;
   	 temp->next=head;
   	 head=temp;
     }
    
   	 
	}

	//Deletes the element at the end of the list.
	int pop(){
        node *temp;
        node *current=head;
         if(current==NULL)
            cout<<"underflow";
        else{
        temp=head;
        head=head->next;
        //delete temp;
        }
        return temp->data;
	}

    
	

	//display
	void disp(){
    	node *current=head;
    	//loop to keep moving to next node
    	while(current!=NULL){
   	 
    	cout<<current->data<<"-<";
    	current=current->next;//the access moves to next node
    
    	}
    	cout<<endl;
	 
	}
	//to count
	int count(){
    	node *current=head;
    	int i=0;
    	//loop to keep moving to next node
    	while(current!=NULL){
    	i++;
    	current=current->next;//the access moves to next node
    
    	}
    	
    	return i;
   	 
	}
    
};

class qu{
    public:
    stk s1;//object 1
	stk s2;
	void enq(){
	    s1.push(1);
        s1.push(2);
        s1.push(3);
        s1.push(4);
	    
	}
	void deq(){
	    cout<<"deleting the element"<<endl;
	    int x=s1.count();
	    
	    for(int j=0; j<x;j++){
	        s2.push(s1.pop());
	        cout<<"s2:";
	        s2.disp();
	        if(j==x-1)
	        {s2.pop();    
	         
	    for(int i=0;i<x-1;i++){
	        s1.push(s2.pop());
	        cout<<"s1:";
	        s1.disp();
	    }
	        }
	    
	}
	}
	void display(){
	    cout<<"queue:";
	    s1.disp();
	}
    
    
    
    
};


int main()
{
   
qu q;
q.enq();
q.display();
q.deq();
q.display();
     
   return 0;
}



